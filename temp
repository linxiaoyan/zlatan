#include <iostream>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include "rtspClient.h"

string url;
string ip;
int port;

int main(int argc, char *argv[])
{
    if (argc != 4)
    {
        return -1;
    }        
    
    ErrorType result;
    
    url = argv[1];
    ip = argv[2];
    port = atoi(argv[3]);
    
    //"rtsp://172.20.100.168:556/liveshow/193?bitrate=1200K";
	RtspClient rtspClient(url);

    result = rtspClient.SendOptionsCommand();
    if (result != RTSP_NO_ERROR)
    {
        return RTSP_INVALID_URI;
    }
    
	result = rtspClient.SendDescribeCommand();
    if (result != RTSP_NO_ERROR)
    {
        return RTSP_INVALID_URI;
    }

	//rtspClient.ParseSDP();

	result = rtspClient.SendSetupCommand();
    if (result != RTSP_NO_ERROR)
    {
        return RTSP_INVALID_URI;
    }

	result = rtspClient.SendPlayCommand();
    if (result != RTSP_NO_ERROR)
    {
        return RTSP_INVALID_URI;
    }

    while (1)
    {
        sleep(10);
    }
    /*
	int packet_num = 0;
	const size_t BufSize = 98304;
	uint8_t buf[BufSize];
	size_t size = 0;

	int fd = open("test_packet_recv.h264", O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR | S_IXUSR);

	while(++packet_num < 10000) 
	{
		//if(!rtspClient.GetMediaData("video", buf, &size, BufSize)) 
		//	continue;
		
		if(write(fd, buf, size) < 0) 
		{
			perror("write");
		}

		printf("recv %u\n", size);
	}
*/
	rtspClient.SendTeardownCommand();
	return 0;
}

#include <sstream>
#include <iostream>
#include <string>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <strings.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include "rtspClient.h"

extern string ip;
extern int port;

ssize_t	ReadLine(int fd, void *vptr, size_t maxlen)
{   
	size_t n; 
	ssize_t rc;
	char c, *ptr;

	ptr = (char *)vptr; 
	for(n = 1; n < maxlen; n++) {
again:
		if((rc = read(fd, &c, 1)) == 1) {
			*ptr++ = c;
			if(c == '\n') 
				break;
		} else if(rc == 0) {
			*ptr = 0;
			return n - 1;
		} else {
			if(errno == EINTR)
				goto again;
			else if(errno == EWOULDBLOCK || errno == EAGAIN) 
				return n - 1;
			return -1;
		}
	}
	*ptr = 0;
	return n;
}


ssize_t Readn(int fd, void *vptr, size_t n)
{
	size_t  nleft;
	ssize_t nread;
	char    *ptr;

	ptr = (char *)vptr;
	nleft = n;
	while (nleft > 0) {
		if ( (nread = read(fd, ptr, nleft)) < 0) {
			if (errno == EINTR)
				nread = 0;      /* and call read() again */
			else if(errno == EWOULDBLOCK || errno == EAGAIN)
				return (n - nleft);
			else
				return(-1);
		} else if (nread == 0)
			break;              /* EOF */

		nleft -= nread;
		ptr   += nread;
	}   
	return(n - nleft);      /* return >= 0 */
}
/* end readn */

#pragma pack(1)

typedef struct TcpHeaderTag
{
    char flag;
    char channel;
    unsigned short len;
}STcpHeader;

#pragma pack()

void *rtp_thread(void *arg)
{
    int sockfd;  
    struct sockaddr_in destAddr;  
  
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)  
    {    
        return NULL;  
    }

    printf("udp sockfd:%d\n", sockfd);
  
    bzero(&destAddr, sizeof(destAddr));  
    destAddr.sin_family = AF_INET;  
    destAddr.sin_port = htons(port);  
    inet_pton(AF_INET, ip.c_str(), &destAddr.sin_addr);     
    
    int nFd = *(int *)arg;
    int epoll_fd;
	struct epoll_event ev, events[128];

	epoll_fd = epoll_create(1);
	ev.data.fd = nFd;
	ev.events = EPOLLIN;
	epoll_ctl(epoll_fd, EPOLL_CTL_ADD, nFd, &ev);

    char buffer[8192];
    STcpHeader tcpHeader;
    int nBuffSize = 8192;
    int nReadSize = 0;
    int nRtpSize = 0;
    char *pBuffer = buffer;
    
    while (1) 
	{
        //printf("before epoll_wait\n");
        int nfds = epoll_wait(epoll_fd, events, 128, -1);
        //printf("after epoll_wait\n");
		if (-1 == nfds || nfds != 1)
			return NULL;

        if (events[0].events & EPOLLIN)
        {
            //printf("before read buffer-size:%d, buffer-used:%d\n", nBuffSize, pBuffer - buffer);
            
            nReadSize = read(nFd, pBuffer, nBuffSize);
            
            //printf("total read:%d\n", nReadSize);

            nReadSize += pBuffer - buffer;
            if (nReadSize > 0)
            {
                char *p = buffer;
                
                while (nReadSize >= 4)
                {
                    memcpy(&tcpHeader, p, 4);
                    nRtpSize = ntohs(tcpHeader.len); 
                    
                    //printf("tcp header: %x %d %d\n", tcpHeader.flag, tcpHeader.channel, nRtpSize);
                    
                    nReadSize -= 4;
                    //printf("1-unread len:%d\n", nReadSize);

                    if (nReadSize >= nRtpSize)
                    {
                        int len = sendto(sockfd, p + 4 + 12, nRtpSize - 12, 0, (struct sockaddr *)&destAddr, sizeof(destAddr));

                        //printf("sendto %d\n", len);
                        
                        p += 4 + nRtpSize;
                        pBuffer = p;
                        nReadSize -= nRtpSize;
                        
                        printf("sendto:%d, left:%d\n", len, nReadSize);
                    }
                    else
                    {
                        nReadSize += 4;
                        break;
                    }
                }
                
                if (nReadSize > 0)
                {
                    //printf("2-unread len:%d\n", nReadSize);
                    memcpy(buffer, pBuffer, nReadSize);
                    pBuffer = buffer;
                    pBuffer += nReadSize;
                    //printf("1------------>debug nReadSize:%d, buffer-size:%d\n", nReadSize, nBuffSize);
                    nBuffSize -= nReadSize;
                    //printf("2------------>debug nReadSize:%d, buffer-size:%d\n", nReadSize, nBuffSize);
                }
                else
                {
                    nBuffSize = 8192;
                    pBuffer = buffer;
                }
            }
            else
            {
                return NULL;
            }

        }
        
	}
}

RtspClient::RtspClient(string url)
    : m_nRtspCseq(0)
    , m_nRtspFd(-1)
    , m_nProtocol(1)
    , m_strRtspUrl(url)
    , m_strCtrlUrl("")
    , m_strRtspResp("")
    , m_strSdp("")
    , m_strSessionId("")
    , CmdPLAYSent(false)
{
	m_audioBuffer.size = 0;
	m_videoBuffer.size = 0;
	if((m_audioBuffer.buff = (uint8_t *)malloc(BUFSIZ)))
		m_audioBuffer.size = BUFSIZ;
	if((m_videoBuffer.buff = (uint8_t *)malloc(BUFSIZ)))
		m_videoBuffer.size = BUFSIZ;
}

RtspClient::~RtspClient()
{
	if(m_audioBuffer.buff) {
		free(m_audioBuffer.buff);
		m_audioBuffer.buff = NULL;
		m_audioBuffer.size = 0;
	}

	if(m_videoBuffer.buff) {
		free(m_videoBuffer.buff);
		m_videoBuffer.buff = NULL;
		m_videoBuffer.size = 0;
	}
}

ErrorType RtspClient::SendOptionsCommand()
{
    ErrorType result;
    result = OpenConnection(m_strRtspUrl);
    
	if (result != RTSP_NO_ERROR)
    {
        return RTSP_INVALID_URI;
    }

	string Cmd("OPTIONS");
	stringstream Msg("");
	Msg << Cmd << " " << m_strRtspUrl << " " << "RTSP/" << VERSION_RTSP << "\r\n";
	Msg << "CSeq: " << ++m_nRtspCseq << "\r\n";
	Msg << "\r\n";

	if(!SendRTSP(m_nRtspFd, Msg.str())) {
		close(m_nRtspFd);
		return RTSP_SEND_ERROR;
	}

	if(!RecvRTSP(m_nRtspFd, &m_strRtspResp)) {
		close(m_nRtspFd);
		return RTSP_RECV_ERROR;
	}
    
    printf("%s\n", m_strRtspResp.c_str());
    
	return RTSP_NO_ERROR;
}

ErrorType RtspClient::SendDescribeCommand()
{
	string Cmd("DESCRIBE");
	stringstream Msg("");
	Msg << Cmd << " " << m_strRtspUrl << " " << "RTSP/" << VERSION_RTSP << "\r\n";
	Msg << "CSeq: " << ++m_nRtspCseq << "\r\n";
	Msg << "\r\n";

	if(!SendRTSP(m_nRtspFd, Msg.str())) {
		close(m_nRtspFd);
		return RTSP_SEND_ERROR;
	}
    
	if(!RecvRTSP(m_nRtspFd, &m_strRtspResp)) {
		close(m_nRtspFd);
		return RTSP_RECV_ERROR;
	}
    
    printf("%s\n", m_strRtspResp.c_str());
    /*
    char *p = strstr((char *)m_strRtspResp.c_str(), "\r\n\r\n");
    if (p == NULL)
    {
        return RTSP_RECV_ERROR;
    }
    
    char buff[128];
    p += strlen("\r\n\r\n");
    const char *pEnd = m_strRtspResp.c_str() + m_strRtspResp.size();
    memset(buff, 0, 128);
    memcpy(buff, p, pEnd - p);
    m_strSdp = buff;
    
	//RecvSDP(sockfd, &m_strSdp);
    
    printf("%s\n", m_strSdp.c_str());
	*/

	return RTSP_NO_ERROR;
}

ErrorType RtspClient::SendSetupCommand()
{
	string Cmd("SETUP");
	stringstream Msg("");
	Msg << Cmd << " " << m_strCtrlUrl << " " << "RTSP/" << VERSION_RTSP << "\r\n";
	Msg << "Transport:" << " " << "RTP/AVP/TCP;";
	Msg << "unicast;" << "interleaved=" << "0-1" << "\r\n";
	Msg << "CSeq: " << ++m_nRtspCseq << "\r\n";
	Msg << "\r\n";

	if(!SendRTSP(m_nRtspFd, Msg.str())) {
		close(m_nRtspFd);
		return RTSP_SEND_ERROR;
	}
    
	if(!RecvRTSP(m_nRtspFd, &m_strRtspResp)) {
		close(m_nRtspFd);
		return RTSP_RECV_ERROR;
	}
    
	m_strSessionId = ParseSessionID(m_strRtspResp);

    printf("%s\n", m_strRtspResp.c_str());
	return RTSP_NO_ERROR;
}

ErrorType RtspClient::SendPlayCommand()
{
	string Cmd("PLAY");
	stringstream Msg("");
	Msg << Cmd << " " << m_strCtrlUrl << " " << "RTSP/" << VERSION_RTSP << "\r\n";
	Msg << "CSeq: " << ++m_nRtspCseq << "\r\n";
    Msg << "Range: npt=0.000-" << "\r\n";
	Msg << "Session: " << m_strSessionId << "\r\n";
	Msg << "\r\n";

	if(!SendRTSP(m_nRtspFd, Msg.str())) {
		close(m_nRtspFd);
		return RTSP_SEND_ERROR;
	}
    
	if(!RecvRTSP(m_nRtspFd, &m_strRtspResp)) {
		close(m_nRtspFd);
		return RTSP_RECV_ERROR;
	}
    
    printf("%s\n", m_strRtspResp.c_str());
    
    int ret;  
    ret = pthread_create(&pid, NULL, rtp_thread, (void *)&m_nRtspFd);  
    if(ret!=0)  
    {  
        printf("Create pthread error!\n");  
        return RTSP_NO_ERROR;  
    }  

    //pthread_join(pid, NULL);
    
    
	return RTSP_NO_ERROR;
}

ErrorType RtspClient::SendTeardownCommand()
{	
	string Cmd("TEARDOWN");
	stringstream Msg("");
	Msg << Cmd << " " << m_strCtrlUrl << " " << "RTSP/" << VERSION_RTSP << "\r\n";
	Msg << "CSeq: " << ++m_nRtspCseq << "\r\n";
	Msg << "Session: " << m_strSessionId << "\r\n";
	Msg << "\r\n";

	if(!SendRTSP(m_nRtspFd, Msg.str())) {
		close(m_nRtspFd);
		return RTSP_SEND_ERROR;
	}
    
	if(!RecvRTSP(m_nRtspFd, &m_strRtspResp)) {
		close(m_nRtspFd);
		return RTSP_RECV_ERROR;
	}
    
	return RTSP_NO_ERROR;
}

bool RtspClient::ParseRtspUrl(const char *url, char *ip, int &port)
{
    bool result = false;
    
    do 
    {
        // Parse the URL as "rtsp://[<username>[:<password>]@]<server-address-or-name>[:<port>][/<stream-name>]"
        const char *prefix = "rtsp://";
        unsigned const prefixLength = 7;
        if (strncmp(url, prefix, prefixLength) != 0) 
        {
            break;
        }
        
        printf("%s\n", url);
        
        const char *ctrlFlag = strstr(url, "?");
        if (ctrlFlag == NULL)
        {
            break;
        }
        
        char ctrl[128];
        memset(ctrl, 0, sizeof(ctrl));
        memcpy(ctrl, url, ctrlFlag - url);
        m_strCtrlUrl = ctrl;
        
        printf("%s\n", m_strCtrlUrl.c_str());
        
        const char *from = &url[prefixLength];
       
        const char *userPassFlag = strstr(from, "&");
        if (userPassFlag != NULL)
        {
            int skip = userPassFlag - from + 1;
            from += skip;
        }
        
        const char *ipPortFlag = strstr(from, "/");
        if (ipPortFlag == NULL)
        {
            break;
        }
        
        char buffer[32];
        memset(buffer, 0, sizeof(buffer));
        int ipPortlen = ipPortFlag - from;
        if (ipPortlen > sizeof(buffer))
        {
            break;
        }
        
        memcpy(buffer, from, ipPortlen);
        
        printf("%s\n", buffer);
        
        const char *portFlag = strstr(buffer, ":");
        if (portFlag == NULL)
        {
            memcpy(ip, buffer, strlen(buffer));
            port = 0;
            result = true;
            break;
        }
        
        int ipLen = portFlag - buffer;
        memcpy(ip, buffer, ipLen);
        ip[ipLen] = '\0';
        
        printf("ip:%s\n", ip);
        
        char szPort[8];
        portFlag += 1;
        int portLen = strlen(buffer) - ipLen - 1;
        memcpy(szPort, portFlag, portLen);
        szPort[portLen] = '\0';
        port = atoi(szPort);
        result = true;
        printf("port:%d\n", port);
  } while (0);

  return result;
}

bool RtspClient::ParseSDP()
{
    /*
    printf("!!!!!%s\n", m_strSdp.c_str());
    char buff[128];
	char *p = strstr((char *)m_strSdp.c_str(), "a=control:");
    
    if (p == NULL)
    {
        return false;
    }
    printf("debug------------->\n");
    p += strlen("a=control:");
    char *pEnd = strstr(p, "\r\n");
    memset(buff, 0, 128);
    memcpy(buff, p, pEnd - p);
    m_strCtrlUrl = buff;
    
    printf("%s\n", m_strCtrlUrl.c_str());
    */
    
    m_strCtrlUrl = "rtsp://172.20.100.168:556/liveshow/193";
    return true;
}

string RtspClient::ParseError(ErrorType et)
{
	string ErrStr("");
	switch(et) {
		case RTSP_NO_ERROR:
			ErrStr.assign("MyRtsp: Success");
			break;
		case RTSP_INVALID_URI:
			ErrStr.assign("MyRtsp: Invalid URI");
			break;
		case RTSP_SEND_ERROR:
			ErrStr.assign("MyRtsp: send error");
			break;
		case RTSP_RECV_ERROR:
			ErrStr.assign("MyRtsp: recv error");
			break;
		case RTSP_INVALID_MEDIA_SESSION:
			ErrStr.assign("MyRtsp: invalid media session error");
			break;
		case RTSP_RESPONSE_BLANK:
			ErrStr.assign("MyRtsp: Response BLANK");
			break;
		case RTSP_RESPONSE_200:
			ErrStr.assign("MyRtsp: Response 200 OK");
			break;
		case RTSP_RESPONSE_400:
			ErrStr.assign("MyRtsp: Response 400 Bad Request");
			break;
		case RTSP_RESPONSE_401:
			ErrStr.assign("MyRtsp: Response 401 Unauthorized");
			break;
		case RTSP_RESPONSE_404:
			ErrStr.assign("MyRtsp: Response 404 Not Found");
			break;
		case RTSP_RESPONSE_40X:
			ErrStr.assign("MyRtsp: Response Client Error");
			break;
		case RTSP_RESPONSE_500:
			ErrStr.assign("MyRtsp: Response 500 Internal Server Error");
			break;
		case RTSP_RESPONSE_501:
			ErrStr.assign("MyRtsp: Response 501 Not Implemented");
			break;
		case RTSP_RESPONSE_50X:
			ErrStr.assign("MyRtsp: Response Server Error");
			break;
		case RTSP_UNKNOWN_ERROR:
			ErrStr.assign("MyRtsp: Unknown Error");
			break;
		default:
			ErrStr.assign("MyRtsp: Unknown Error");
			break;
	}
	return ErrStr;
}

ErrorType RtspClient::OpenConnection(string url)
{
    char ip[32];
    int port = 0;
    int sockstatus = -1;
	struct sockaddr_in srvAddr;
    ErrorType result = RTSP_NO_ERROR;
    
    do
    {
        if (!ParseRtspUrl(url.c_str(), ip, port))
        {
            result = RTSP_INVALID_URI;
            break;
        }
        
        if((m_nRtspFd = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
        {
            result = RTSP_INTERNALE_ERROR;
            break;
        }

        sockstatus = fcntl(m_nRtspFd, F_GETFL, 0);
        fcntl(m_nRtspFd, F_SETFL, sockstatus | O_NONBLOCK);

        bzero(&srvAddr, sizeof(srvAddr));
        srvAddr.sin_family = AF_INET;
        srvAddr.sin_port = htons(port);
        srvAddr.sin_addr.s_addr = inet_addr(ip);

        if(connect(m_nRtspFd, (struct sockaddr *)&srvAddr, sizeof(srvAddr)) < 0 && errno != EINPROGRESS) 
        {
            result = RTSP_INTERNALE_ERROR;
            close(m_nRtspFd);
            m_nRtspFd = -1;
            break;
        }

        if(!CheckSockWritable(m_nRtspFd)) {
            m_nRtspFd = -1;
            break;
        }
        
        result = RTSP_NO_ERROR;
    } while (0);
	
    return result;
}

/*********************/
/* Protected Methods */
int RtspClient::CheckSockWritable(int sockfd, struct timeval *tv)
{
	fd_set writeSet;
	struct timeval timeVal;
	FD_ZERO(&writeSet);
	FD_SET(sockfd, &writeSet);
	if(!tv) {
		timeVal.tv_sec = SELECT_TIMEOUT_SEC;
		timeVal.tv_usec = SELECT_TIMEOUT_USEC;
	} else {
		timeVal = *tv;
	}

	while(select(sockfd + 1, NULL, &writeSet, NULL, &timeVal) != 0) {
		if(FD_ISSET(sockfd, &writeSet)) {
			return CHECK_OK;
		}
		return CHECK_ERROR;
	}   
	printf("Select Timeout\n");
	return CHECK_ERROR;
}

int RtspClient::CheckSockReadable(int sockfd, struct timeval *tv)
{
	fd_set readSet;
	struct timeval timeVal;
	FD_ZERO(&readSet);
	FD_SET(sockfd, &readSet);
	if(!tv) {
		timeVal.tv_sec = SELECT_TIMEOUT_SEC;
		timeVal.tv_usec = SELECT_TIMEOUT_USEC;
	} else {
		timeVal = *tv;
	}

	while(select(sockfd + 1, &readSet, NULL, NULL, &timeVal) != 0) {
		if(FD_ISSET(sockfd, &readSet)) {
			return CHECK_OK;
		}
		return CHECK_ERROR;
	}   
	printf("Select Timeout\n");
	return CHECK_ERROR;
}

int RtspClient::SendRTSP(int fd, const char *msg, size_t size)
{
 	int nWriteSize = 0;
    int nWriteTotal = 0;
 	int Err = TRANS_OK;

	while(size > 0) {
		if(!CheckSockWritable(fd)) {
			Err = TRANS_ERROR;
			break;
		}
        
		nWriteSize = write(fd, msg + nWriteTotal, size);
		
        if (nWriteSize > 0)
        {
            size -= nWriteSize;
            nWriteTotal += nWriteSize;
        }
        else if(nWriteSize < 0) 
        {
			if(errno == EINTR || errno == EWOULDBLOCK || errno == EAGAIN)
            {
                continue;
            }
			else 
            {
				Err = TRANS_ERROR;
				break;
			}
		} 
        else 
        {
			Err = TRANS_ERROR;
			break;
		}
	}

    printf ("%s\n", msg);
	return Err;
}

int RtspClient::SendRTSP(int fd, string msg)
{
	return SendRTSP(fd, msg.c_str(), msg.length());
}

int RtspClient::RecvRTSP(int fd, char *msg, size_t maxlen)
{
	int RecvResult = 0;
	int Index = 0;
	int Err = TRANS_OK;

    int nReadLen = 0;
    int nReadTotal = 0;
	memset(msg, 0, maxlen);
    
	while(maxlen > 0) 
    {
		if(!CheckSockReadable(fd)) {
			Err = TRANS_ERROR;
			break;
		}
        
		nReadLen = read(fd, msg, maxlen);
        break;
	}
    
	return Err;
}

int RtspClient::RecvRTSP(int fd, string *msg)
{
	char *pBuff = (char *)calloc(RECV_BUF_SIZE, sizeof(char));
	int RecvResult = TRANS_OK;

	msg->assign("");
	RecvResult = RecvRTSP(fd, pBuff, RECV_BUF_SIZE);
	if(TRANS_OK == RecvResult) msg->assign(pBuff);
	free(pBuff);
	return RecvResult;
}

int RtspClient::RecvSDP(int sockfd, char * msg, size_t size)
{
	if(!msg || size < 0) {
		printf("Recv Argument Error\n");
		return TRANS_ERROR;
	}

	int RecvResult = 0;
	int Index = 0;
	int Err = TRANS_OK;

	memset(msg, 0, size);
	while(size > 0) {
		if(!CheckSockReadable(sockfd)) {
			Err = TRANS_ERROR;
			break;
		}
		RecvResult = Readn(sockfd, msg + Index, size);
		if(RecvResult < 0) {
			if(errno == EINTR) continue;
			else if(errno == EWOULDBLOCK || errno == EAGAIN) {
				Err = TRANS_OK;
				break;
			} else {
				Err = TRANS_ERROR;
				break;
			}
		} else if(RecvResult == 0) {
			Err = TRANS_ERROR;
			break;
		}
		Index += RecvResult;
		size -= RecvResult;
	}

	return Err;
}

int RtspClient::RecvSDP(int sockfd, string * msg)
{
	char *pBuff = (char *)calloc(RECV_BUF_SIZE, sizeof(char));
	size_t size = RECV_BUF_SIZE;

	int RecvResult = RecvSDP(m_nRtspFd, pBuff, size);
	if(TRANS_OK == RecvResult) msg->assign(pBuff);
	free(pBuff);
    return TRANS_OK;
}

int RtspClient::Close(int sockfd)
{
	int CloseResult = -1;
	if(sockfd == m_nRtspFd) {
		CloseResult = close(m_nRtspFd);
		m_nRtspFd = -1;
	} else {
		if(sockfd > 0) CloseResult = close(sockfd);
		if(m_nRtspFd > 0) CloseResult = close(m_nRtspFd);
	}
	return CloseResult;
}

string RtspClient::ParseSessionID(string strResp)
{
    char *p = strstr((char *)strResp.c_str(), "Session: ");
    p += strlen("Session: ");
    string strId = "";
    while (*p != ';')
    {
        strId.push_back(*p);
        p++;
    }
    
	return strId;
}

#ifndef __RTSP_CLIENT_H__
#define __RTSP_CLIENT_H__

#include <stdio.h>
#include <string>
#include <netinet/in.h>
#include <arpa/inet.h>

using namespace std;

#define PORT_RTSP 				554
#define VERSION_RTSP 			"1.0"
#define SELECT_TIMEOUT_SEC 		1
#define SELECT_TIMEOUT_USEC 	0

#define CHECK_OK 				1
#define CHECK_ERROR				0

#define TRANS_OK 				1
#define TRANS_ERROR 			0

#define RECV_BUF_SIZE 			8192

enum SessionType {
    VIDEO_SESSION = 0, 
    AUDIO_SESSION
};

enum ErrorType {
    RTSP_NO_ERROR = 0,
    RTSP_INTERNALE_ERROR,
    RTSP_INVALID_URI,
	RTSP_SEND_ERROR, 
	RTSP_RECV_ERROR,
	RTSP_INVALID_MEDIA_SESSION,
	RTSP_RESPONSE_BLANK,
	RTSP_RESPONSE_200,
	RTSP_RESPONSE_400,
	RTSP_RESPONSE_401,
	RTSP_RESPONSE_404,
	RTSP_RESPONSE_40X,
	RTSP_RESPONSE_500,
	RTSP_RESPONSE_501,
	RTSP_RESPONSE_50X,
    RTSP_UNKNOWN_ERROR
};

typedef struct Buffer_t {
	uint8_t *buff;
	size_t size;
} Buffer_t;

class RtspClient
{
public:
    RtspClient(string uri);
    ~RtspClient();
    
    ErrorType SendOptionsCommand();
    ErrorType SendDescribeCommand();
    ErrorType SendSetupCommand();
    ErrorType SendPlayCommand();
    ErrorType SendTeardownCommand();

    bool   ParseRtspUrl(const char *url, char *ip, int &port);
    bool   ParseSDP();

protected:
    ErrorType OpenConnection(string uri = "");
    int SendRTSP(int fd, const char *msg, size_t size);
    int SendRTSP(int fd, string msg);
    int RecvRTSP(int fd, char *msg, size_t max_line);
    int RecvRTSP(int fd, string *msg);
    int CheckSockWritable(int sockfd, struct timeval * tval = NULL);
    int CheckSockReadable(int sockfd, struct timeval * tval = NULL);

    int RecvSDP(int sockfd, char * msg, size_t size);
    int RecvSDP(int sockfd, string * msg = NULL); 
    int Close(int sockfd);
    
private:    
    string ParseSessionID(string ResponseOfSETUP = "");
    string ParseError(ErrorType et);

protected:
    unsigned int m_nRtspCseq;
    int    m_nRtspFd;
    int    m_nProtocol;
    string m_strRtspUrl;
    string m_strCtrlUrl;
    string RtspIP;
    string m_strRtspResp;
    string m_strSdp;
    string m_strSessionId;
    
    bool CmdPLAYSent;

    // uint8_t AudioBuffer[BUFSIZ];
    // uint8_t VideoBuffer[BUFSIZ];
    Buffer_t m_audioBuffer;
    Buffer_t m_videoBuffer;
    pthread_t pid;
};

#endif
